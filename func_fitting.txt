# -*- coding: utf-8 -*-
"""
Created on Thu Nov  5 17:02:45 2020

@author: armstrongct2
"""

#optimization trial
from datetime import datetime
import time
import numpy as np
from matplotlib import pyplot as plt
import csv
import pandas as pd
from numpy import genfromtxt
import math
import scipy as sp
from scipy import special
from scipy.optimize import curve_fit

init = datetime.now()
#def func(x, a, b, c):
#    return a * np.exp(-b * x) + c
#
#xdata = np.linspace(0, 4, 50)
#y = func(xdata, 2.5, 1.3, 0.5)
#np.random.seed(1729)
#y_noise = 0.2 * np.random.normal(size=xdata.size)
#ydata = y + y_noise
#plt.plot(xdata, ydata, 'b-', label='data')
#
#popt, pcov = curve_fit(func, xdata, ydata)
#plt.plot(xdata, func(xdata, *popt), 'g--', label='fit: a=%5.3f, b=%5.3f, c=%5.3f' % tuple(popt))
#plt.xlabel('x')
#plt.ylabel('y')
#plt.legend()

#T = 283.15
#R = 8.314
#A0 = 0.05
#
#def kin_func(t,k):
#  return 1/(1/A0 + k*t)
#
#tdata = np.array([15,30,45,60,90,120])
#exp_data = np.array([.0353,.0298,.0247,.0211,.0162,.0131])
#
#popt,pcov = curve_fit(kin_func,tdata,exp_data,bounds=(0,np.inf))
#plt.plot(tdata,exp_data,label='experimental')
#plt.plot(tdata,kin_func(tdata,*popt),label='curve_fit: k=%.2f' %tuple(popt))
#plt.legend()
#

#Q = 5.2*10**-7 #vol flow rate in m^3/s
#A = 1.77*10**-5 #cross-sectional area of reactor in m^2
#u = Q/A #vel m/s
#V = 1.47*10**-4 #reactor volume in m^3
#xl = V/A #tubing length m
#nx = 299 #counter
#dx = xl/(nx-1) #x step
#dt = .0025 #time step

Q = 8.3*10**-8 #vol flow rate in m^3/s
r = 1.5875/2000 #cross-sectional area of reactor in m^2
A = math.pi*r**2
u = Q/A #vel m/s
V = 1.025*10**-5 #reactor volume in m^3
xl = V/A #tubing length m
nx = 500 #counter
D = .02 #m/s^2
DuL = .004
t0 = 0 #start time in s
tr = int(V/Q) #mean res. time in s
te = 2*tr #end time - twice the residence time in s
t = np.linspace(t0,te,nx) #time array - starts at t0, ends at te and has nx values
theta = t/tr

#data = genfromtxt('MB_01_008_RTD-Toluene.csv',delimiter=',')
#expdata = data[50:200,2]/45000-.0234
#tdata=data[50:200,1]
#thetadata = tdata/tr


#data = genfromtxt('10mLtrial.csv',delimiter=',')
#expdata = data[:]
#tdata=np.linspace(0,(len(data)-1)*15,len(data))
#thetadata = tdata/tr

data = genfromtxt('10mLRTDcomol.csv',delimiter=',',skip_header=5)
expdata = data[:,1]
tdata=data[:,0]
thetadata = tdata/tr


def disp_func(theta,D):
  return (1/(2*np.sqrt(3.14*(DuL))))*np.exp(-(1-theta)**2/(4*DuL))

def f_curve(thetadata,D):
  return 0.5*(special.erf(((thetadata)-1)/(2*np.sqrt(D/u/xl)))+special.erf((1)/(2*np.sqrt(D/u/xl))))

#E = disp_func(theta,DuL)
#F = f_curve(theta,DuL)
#plt.plot(theta,E)
#plt.plot(theta,F)
  
popt, pcov = curve_fit(f_curve,thetadata,expdata,method='lm')
plt.plot(thetadata,expdata,label = 'RTD Data')
plt.plot(thetadata,f_curve(thetadata,*popt),label = 'Curve Fit: D/uL = %s, D = %s'%(np.round(*popt/u/xl,4),np.round(*popt,5)))
#plt.xlim(0.5,1.5)
plt.legend()
perr = np.sqrt(np.diag(pcov))
end = datetime.now()
cputime = end-init
print(cputime)